Wiggle Sort II

class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        int n = nums.size();

        // Step 1: Find the median
        auto midPtr = nums.begin() + n / 2;
        nth_element(nums.begin(), midPtr, nums.end());
        int median = *midPtr;

        // Step 2: Partition the array into two halves based on the median
        int left = 0, right = n - 1, i = 0;
        while (i <= right) {
            if (nums[i] < median) {
                swap(nums[left++], nums[i++]);
            } else if (nums[i] > median) {
                swap(nums[right--], nums[i]);
            } else {
                i++;
            }
        }

        // Step 3: Rearrange the array into a wiggle pattern
        vector<int> temp(n);
        int idx = 0, mid = n % 2 == 0 ? n / 2 - 1 : n / 2;
        for (int i = 0; i <= mid; ++i) {
            temp[idx] = nums[mid - i];
            if (idx + 1 < n) {
                temp[idx + 1] = nums[n - 1 - i];
            }
            idx += 2;
        }
        nums = temp;
    }
};
